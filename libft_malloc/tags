!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/nfs/homes/jsauvain/documents/ft_malloc/libft_malloc/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
add_alloc_block	realloc.c	/^static void	add_alloc_block(t_block *alloc_block, t_block *realloc_block)$/;"	f	typeref:typename:void	file:
add_block_at_beginning_if_necessary	realloc.c	/^static int	add_block_at_beginning_if_necessary(t_heap_group *heap, t_block *block, t_block *tmp,/;"	f	typeref:typename:int	file:
add_block_at_end_if_necessary	realloc.c	/^static int	add_block_at_end_if_necessary(t_heap_group *heap, t_block *block, t_block *tmp, int p/;"	f	typeref:typename:int	file:
add_free_block	realloc.c	/^static void	add_free_block(t_heap_group *heap, t_block *block)$/;"	f	typeref:typename:void	file:
add_heap	create_new_heap.c	/^static t_heap_group	*add_heap(size_t size)$/;"	f	typeref:typename:t_heap_group *	file:
add_heap_edge	create_new_heap.c	/^static int	add_heap_edge(t_heap_group *heaps, t_heap_group *new_heap, size_t size)$/;"	f	typeref:typename:int	file:
add_heap_middle	create_new_heap.c	/^static void	add_heap_middle(t_heap_group *heaps, t_heap_group *new_heap, int add_status)$/;"	f	typeref:typename:void	file:
add_heap_pos_free_blocks	merge_heaps.c	/^static void	add_heap_pos_free_blocks(t_heap_group *heap_pos, t_heap_group *new_heap, size_t allo/;"	f	typeref:typename:void	file:
add_new_alloc_block	get_avail_block.c	/^static t_block	*add_new_alloc_block(t_heap_group *heap, t_block *free_block, size_t size)$/;"	f	typeref:typename:t_block *	file:
add_new_heap	create_new_heap.c	/^static void	add_new_heap(t_heap_group *new_heap, size_t alloc_size, size_t size)$/;"	f	typeref:typename:void	file:
add_new_heap_free_blocks	merge_heaps.c	/^static void	add_new_heap_free_blocks(t_heap_group *heap_pos, t_heap_group *new_heap, size_t allo/;"	f	typeref:typename:void	file:
allocate_heap	create_new_heap.c	/^t_heap_group	*allocate_heap(size_t size, int mode)$/;"	f	typeref:typename:t_heap_group *
check_heap_left	heap_utils.c	/^t_heap_group	*check_heap_left(size_t size)$/;"	f	typeref:typename:t_heap_group *
check_heap_state	heap_utils.c	/^int	check_heap_state(size_t size)$/;"	f	typeref:typename:int
check_if_heap_contiguous	create_new_heap.c	/^static t_heap_group	*check_if_heap_contiguous(t_heap_group *new_heap, size_t alloc_size, size_t /;"	f	typeref:typename:t_heap_group *	file:
create_heap	create_new_heap.c	/^static t_heap_group	*create_heap(size_t size)$/;"	f	typeref:typename:t_heap_group *	file:
delete_free_block	get_avail_block.c	/^static t_block	*delete_free_block(t_block *free_block, size_t size) \/\/raccourcir la fonction$/;"	f	typeref:typename:t_block *	file:
display_heap	show_alloc_mem.c	/^static size_t	display_heap(size_t size, char *size_str)$/;"	f	typeref:typename:size_t	file:
extend_block	realloc.c	/^static void	*extend_block(t_heap_group *heap, t_block *ptr_block, size_t realloc_size)$/;"	f	typeref:typename:void *	file:
find_heap	heap_utils.c	/^t_heap_group	*find_heap(int heap_index, int i)$/;"	f	typeref:typename:t_heap_group *
find_ptr_block	block_utils.c	/^t_block	*find_ptr_block(t_heap_group *heap, void *ptr)$/;"	f	typeref:typename:t_block *
first_fit	get_avail_block.c	/^static void	*first_fit(t_heap_group *heap, size_t size)$/;"	f	typeref:typename:void *	file:
ft_free	free.c	/^void	ft_free(void *ptr)$/;"	f	typeref:typename:void
ft_malloc	malloc.c	/^void	*ft_malloc(size_t size)$/;"	f	typeref:typename:void *
ft_realloc	realloc.c	/^void	*ft_realloc(void *ptr, size_t size) \/\/ tout modifier en fonction de t_heap et t_heap_grou/;"	f	typeref:typename:void *
g_heap	malloc.c	/^t_heap	g_heap = {};$/;"	v	typeref:typename:t_heap
get_alloc_size	create_new_heap.c	/^static size_t	get_alloc_size(size_t size)$/;"	f	typeref:typename:size_t	file:
get_avail_block	get_avail_block.c	/^void	*get_avail_block(t_heap_group *heap, size_t size)$/;"	f	typeref:typename:void *
get_new_index	create_new_heap.c	/^static int	get_new_index(int index, int i)$/;"	f	typeref:typename:int	file:
get_required_size	realloc.c	/^static size_t	get_required_size(t_block *tmp, size_t realloc_size)$/;"	f	typeref:typename:size_t	file:
initialize_new_heap	create_new_heap.c	/^static void	initialize_new_heap(t_heap_group *new_heap, size_t alloc_size)$/;"	f	typeref:typename:void	file:
main	main.c	/^int	main(void)$/;"	f	typeref:typename:int
merge_blocks	free.c	/^static void	merge_blocks(t_heap_group *heap, t_block *block)$/;"	f	typeref:typename:void	file:
merge_blocks	realloc.c	/^static void	merge_blocks(t_block *block, size_t required_size)$/;"	f	typeref:typename:void	file:
merge_heaps	merge_heaps.c	/^t_heap_group	*merge_heaps(t_heap_group *heap_pos, t_heap_group *new_heap, size_t alloc_size)$/;"	f	typeref:typename:t_heap_group *
merge_two_consecutive_block_if_necessary	realloc.c	/^static int merge_two_consecutive_block_if_necessary(t_block *block, t_block *tmp)$/;"	f	typeref:typename:int	file:
put_realloc_block_after_alloc_block	realloc.c	/^static void	put_realloc_block_after_alloc_block(t_block *realloc_block, t_block *alloc_block)$/;"	f	typeref:typename:void	file:
put_realloc_block_before_alloc_block	realloc.c	/^static void	put_realloc_block_before_alloc_block(t_block *realloc_block, t_block *alloc_block)$/;"	f	typeref:typename:void	file:
realloc_ptr	realloc.c	/^static void	*realloc_ptr(t_heap_group *heap, t_block *ptr_block, size_t realloc_size)$/;"	f	typeref:typename:void *	file:
remove_ptr_block	realloc.c	/^static void	remove_ptr_block(t_heap_group *heap, t_block *ptr_block)$/;"	f	typeref:typename:void	file:
select_heap	heap_utils.c	/^t_heap_group	*select_heap(size_t size)$/;"	f	typeref:typename:t_heap_group *
show_alloc_mem	show_alloc_mem.c	/^void show_alloc_mem(void)$/;"	f	typeref:typename:void
shrink_alloc_block	realloc.c	/^static t_block	*shrink_alloc_block(t_heap_group *heap, t_block *ptr_block, size_t realloc_size)$/;"	f	typeref:typename:t_block *	file:
shrink_free_block	realloc.c	/^static t_block	*shrink_free_block(t_heap_group *heap, t_block *ptr_block, t_block *realloc_block/;"	f	typeref:typename:t_block *	file:
