!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
add_alloc_block	libft_malloc/srcs/block_related/add_alloc_block.c	/^void	add_alloc_block(t_heap_group *heap, t_block *free_block, size_t size)$/;"	f
add_block_as_only_block	libft_malloc/srcs/block_related/add_free_block.c	/^static t_block	*add_block_as_only_block(t_block *block)$/;"	f	file:
add_block_at_beginning	libft_malloc/srcs/block_related/add_free_block.c	/^static t_block	*add_block_at_beginning(t_block *block, t_block *tmp)$/;"	f	file:
add_block_at_end	libft_malloc/srcs/block_related/add_free_block.c	/^static void	add_block_at_end(t_block *block, t_block *tmp)$/;"	f	file:
add_block_in_middle	libft_malloc/srcs/block_related/add_free_block.c	/^static void add_block_in_middle(t_block *block, t_block *tmp)$/;"	f	file:
add_free_block	libft_malloc/srcs/block_related/add_free_block.c	/^void	add_free_block(t_heap_group *heap, t_block *block)$/;"	f
add_heap	libft_malloc/srcs/heap_related/add_heap.c	/^t_heap_group	*add_heap(size_t size)$/;"	f
add_heap1_free_blocks	libft_malloc/srcs/heap_related/merge_heaps.c	/^static void	add_heap1_free_blocks(t_heap_group *heap1, t_heap_group *heap2, size_t alloc_size)$/;"	f	file:
add_heap2_free_blocks	libft_malloc/srcs/heap_related/merge_heaps.c	/^static void	add_heap2_free_blocks(t_heap_group *heap1, t_heap_group *heap2, size_t alloc_size)$/;"	f	file:
add_heap_edge	libft_malloc/srcs/heap_related/add_heap.c	/^static int	add_heap_edge(t_heap_group *heaps, t_heap_group *new_heap, size_t size)$/;"	f	file:
add_heap_middle	libft_malloc/srcs/heap_related/add_heap.c	/^static void	add_heap_middle(t_heap_group *heaps, t_heap_group *new_heap, int add_status)$/;"	f	file:
add_new_heap	libft_malloc/srcs/heap_related/add_heap.c	/^static void	add_new_heap(t_heap_group *new_heap, size_t alloc_size, size_t size)$/;"	f	file:
add_realloc_block	libft_malloc/srcs/block_related/shrink_free_block.c	/^static void	add_realloc_block(t_block *alloc_block, t_block *realloc_block)$/;"	f	file:
allocate_heap	libft_malloc/srcs/heap_related/allocate_heap.c	/^t_heap_group	*allocate_heap(size_t size, int mode)$/;"	f
check_heap_left	libft_malloc/srcs/heap_related/heap_utils.c	/^t_heap_group	*check_heap_left(size_t size)$/;"	f
check_heap_state	libft_malloc/srcs/heap_related/heap_utils.c	/^int	check_heap_state(size_t size)$/;"	f
check_if_heap_contiguous	libft_malloc/srcs/heap_related/add_heap.c	/^static t_heap_group	*check_if_heap_contiguous(t_heap_group *new_heap, size_t alloc_size, size_t size)$/;"	f	file:
create_heap	libft_malloc/srcs/heap_related/create_new_heap.c	/^t_heap_group	*create_heap(size_t size)$/;"	f
delete_block	libft_malloc/srcs/block_related/delete_block.c	/^t_block	*delete_block(t_block *block, size_t size)$/;"	f
delete_partially	libft_malloc/srcs/block_related/delete_block.c	/^static t_block	*delete_partially(t_block *block, size_t size)$/;"	f	file:
delete_whole_block	libft_malloc/srcs/block_related/delete_block.c	/^static t_block	*delete_whole_block(t_block *block)$/;"	f	file:
display_heap	libft_malloc/srcs/show_mem/show_alloc_mem.c	/^static size_t	display_heap(size_t size, char *size_str)$/;"	f	file:
extend_block	libft_malloc/srcs/block_related/extend_block.c	/^void	*extend_block(t_heap_group *heap, t_block *ptr_block, size_t realloc_size)$/;"	f
find_heap	libft_malloc/srcs/heap_related/heap_utils.c	/^t_heap_group	*find_heap(int heap_index, int i)$/;"	f
find_ptr_block	libft_malloc/srcs/block_related/block_utils.c	/^t_block	*find_ptr_block(t_heap_group *heap, void *ptr)$/;"	f
first_fit	libft_malloc/srcs/block_related/get_avail_block.c	/^static void	*first_fit(t_heap_group *heap, size_t size)$/;"	f	file:
free_block	libft_malloc/srcs/free.c	/^static void	free_block(t_heap_group *heap, t_block *block)$/;"	f	file:
ft_free	libft_malloc/srcs/free.c	/^void	ft_free(void *ptr)$/;"	f
ft_malloc	libft_malloc/srcs/malloc.c	/^void	*ft_malloc(size_t size)$/;"	f
ft_realloc	libft_malloc/srcs/realloc.c	/^void	*ft_realloc(void *ptr, size_t size)$/;"	f
g_heap	libft_malloc/srcs/malloc.c	/^t_heap	g_heap = {};$/;"	v
get_alloc_size	libft_malloc/srcs/heap_related/heap_utils.c	/^size_t	get_alloc_size(size_t size)$/;"	f
get_avail_block	libft_malloc/srcs/block_related/get_avail_block.c	/^void	*get_avail_block(t_heap_group *heap, size_t size)$/;"	f
get_new_index	libft_malloc/srcs/heap_related/heap_utils.c	/^int	get_new_index(int index, int i)$/;"	f
get_required_size	libft_malloc/srcs/block_related/extend_block.c	/^static size_t	get_required_size(t_block *tmp, size_t realloc_size)$/;"	f	file:
initialize_new_heap	libft_malloc/srcs/heap_related/heap_utils.c	/^void	initialize_new_heap(t_heap_group *new_heap, size_t alloc_size)$/;"	f
merge_blocks	libft_malloc/srcs/block_related/extend_block.c	/^static void	merge_blocks(t_block *block, size_t required_size)$/;"	f	file:
merge_heaps	libft_malloc/srcs/heap_related/merge_heaps.c	/^t_heap_group	*merge_heaps(t_heap_group *heap1, t_heap_group *heap2, size_t alloc_size)$/;"	f
munmap_heap	libft_malloc/srcs/free.c	/^static void	munmap_heap(t_heap_group *heap, t_block *block)$/;"	f	file:
put_realloc_block_after_alloc_block	libft_malloc/srcs/block_related/shrink_free_block.c	/^static void	put_realloc_block_after_alloc_block(t_block *realloc_block, t_block *alloc_block)$/;"	f	file:
put_realloc_block_before_alloc_block	libft_malloc/srcs/block_related/shrink_free_block.c	/^static void	put_realloc_block_before_alloc_block(t_block *realloc_block, t_block *alloc_block)$/;"	f	file:
realloc_ptr	libft_malloc/srcs/realloc.c	/^static void	*realloc_ptr(t_heap_group *heap, t_block *ptr_block, size_t realloc_size)$/;"	f	file:
remove_ptr_block	libft_malloc/srcs/block_related/shrink_free_block.c	/^static void	remove_ptr_block(t_heap_group *heap, t_block *ptr_block)$/;"	f	file:
select_heap	libft_malloc/srcs/heap_related/heap_utils.c	/^t_heap_group	*select_heap(size_t size)$/;"	f
show_alloc_mem	libft_malloc/srcs/show_mem/show_alloc_mem.c	/^void show_alloc_mem(void)$/;"	f
shrink_alloc_block	libft_malloc/srcs/block_related/shrink_alloc_block.c	/^t_block	*shrink_alloc_block(t_heap_group *heap, t_block *ptr_block, size_t realloc_size)$/;"	f
shrink_free_block	libft_malloc/srcs/block_related/shrink_free_block.c	/^t_block	*shrink_free_block(t_heap_group *heap, t_block *ptr_block, t_block *realloc_block, size_t realloc_size)$/;"	f
update_alloc_blocks	libft_malloc/srcs/block_related/add_alloc_block.c	/^static t_block	*update_alloc_blocks(t_block *alloc_block, t_block *free_block, size_t size)$/;"	f	file:
update_deleted_part	libft_malloc/srcs/block_related/delete_block.c	/^static void	update_deleted_part(t_block *block, size_t size, size_t aligned_size)$/;"	f	file:
update_heaps	libft_malloc/srcs/free.c	/^static void	update_heaps(t_heap_group *prev_heap, t_heap_group *next_heap)$/;"	f	file:
update_left_part	libft_malloc/srcs/block_related/delete_block.c	/^static t_block	*update_left_part(t_block *block, size_t size, size_t aligned_size)$/;"	f	file:
