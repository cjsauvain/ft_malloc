!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
add_alloc_block	block_related/add_alloc_block_bonus.c	/^t_block	*add_alloc_block(t_heap_group *heap, t_block *free_block)$/;"	f
add_block_as_only_block	block_related/add_free_block_bonus.c	/^static t_block	*add_block_as_only_block(t_block *block)$/;"	f	file:
add_block_at_beginning	block_related/add_free_block_bonus.c	/^static t_block	*add_block_at_beginning(t_block *block, t_block *tmp)$/;"	f	file:
add_block_at_end	block_related/add_free_block_bonus.c	/^static void	add_block_at_end(t_block *block, t_block *tmp)$/;"	f	file:
add_block_in_middle	block_related/add_free_block_bonus.c	/^static void	add_block_in_middle(t_block *block, t_block *tmp)$/;"	f	file:
add_free_block	block_related/add_free_block_bonus.c	/^void	add_free_block(t_heap_group *heap, t_block *block)$/;"	f
add_heap	heap_related/add_heap_bonus.c	/^t_heap_group	*add_heap(size_t size)$/;"	f
add_heap_pos_free_blocks	heap_related/add_heap_pos_free_blocks_bonus.c	/^void	add_heap_pos_free_blocks(t_heap_group *heap_pos, \\$/;"	f
add_new_heap	heap_related/add_heap_bonus.c	/^static void	add_new_heap(t_heap_group *new_heap, \\$/;"	f	file:
add_new_heap_free_blocks	heap_related/add_new_heap_free_blocks_bonus.c	/^void	add_new_heap_free_blocks(t_heap_group *heap_pos, size_t alloc_size)$/;"	f
add_realloc_block	block_related/shrink_free_block_bonus.c	/^static void	add_realloc_block(t_block *alloc_block, t_block *realloc_block)$/;"	f	file:
check_heap_left	heap_related/check_heap_left_bonus.c	/^t_heap_group	*check_heap_left(size_t size)$/;"	f
check_heap_state	heap_related/check_heap_state_bonus.c	/^int	check_heap_state(size_t size)$/;"	f
check_if_block_is_allocated	heap_related/find_heap_bonus.c	/^static int	check_if_block_is_allocated(t_heap_group *heap, t_block *block)$/;"	f	file:
check_if_heap_contiguous	heap_related/add_heap_bonus.c	/^static t_heap_group	*check_if_heap_contiguous(t_heap_group *new_heap, \\$/;"	f	file:
check_rezone_necessity	realloc_bonus.c	/^static int	check_rezone_necessity(size_t size_ptr, size_t size_realloc)$/;"	f	file:
count_zeros	show_mem_hexdump/display_hexa_format_bonus.c	/^static size_t	count_zeros(char *content, size_t increment, \\$/;"	f	file:
create_heap	heap_related/create_new_heap_bonus.c	/^t_heap_group	*create_heap(size_t size)$/;"	f
delete_block	block_related/delete_block_bonus.c	/^t_block	*delete_block(t_block *block, size_t size, int merge_req)$/;"	f
delete_partially	block_related/delete_block_bonus.c	/^static t_block	*delete_partially(t_block *block, size_t size)$/;"	f	file:
delete_whole_block	block_related/delete_block_bonus.c	/^static t_block	*delete_whole_block(t_block *block, int merge_req)$/;"	f	file:
display_heap	show_mem_hexdump/show_mem_hexdump_bonus.c	/^static void	display_heap(size_t size, char *heap_str)$/;"	f	file:
display_hexa_format	show_mem_hexdump/display_hexa_format_bonus.c	/^void	display_hexa_format(t_heap_group *heap, t_block *alloc_block)$/;"	f
display_next_block_address	show_mem_hexdump/show_mem_hexdump_bonus.c	/^static void	display_next_block_address(t_heap_group *heap, char *heap_str, t_block *alloc_block)$/;"	f	file:
extend_block	block_related/extend_block_bonus.c	/^void	*extend_block(t_heap_group *heap, t_block *ptr_block, \\$/;"	f
fill_contiguous_free_blocks	heap_related/add_heap_pos_free_blocks_bonus.c	/^static void	fill_contiguous_free_blocks(t_heap_group *heap_pos, \\$/;"	f	file:
fill_noncontiguous_free_blocks	heap_related/add_heap_pos_free_blocks_bonus.c	/^static void	fill_noncontiguous_free_blocks(t_block *new_heap_free, \\$/;"	f	file:
find_heap	heap_related/find_heap_bonus.c	/^t_heap_group	*find_heap(t_block *block, int i)$/;"	f
first_fit	block_related/get_avail_block_bonus.c	/^static void	*first_fit(t_heap_group *heap, size_t size)$/;"	f	file:
free	free_bonus.c	/^void	free(void *ptr)$/;"	f
free_block	free_bonus.c	/^static void	free_block(t_heap_group *heap, t_block *block)$/;"	f	file:
g_heap	malloc_bonus.c	/^t_heap			g_heap;$/;"	v
g_mutex	malloc_bonus.c	/^pthread_mutex_t	g_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
get_avail_block	block_related/get_avail_block_bonus.c	/^void	*get_avail_block(t_heap_group *heap, size_t size)$/;"	f
get_heap_group	heap_related/get_heap_group_bonus.c	/^size_t	get_heap_group(size_t size)$/;"	f
get_required_size	block_related/extend_block_bonus.c	/^static size_t	get_required_size(t_block *tmp, size_t realloc_size)$/;"	f	file:
get_required_size	heap_related/check_heap_left_bonus.c	/^static size_t	get_required_size(t_block *heap_free, size_t size)$/;"	f	file:
initialize_new_heap	heap_related/initialize_new_heap_bonus.c	/^void	initialize_new_heap(t_heap_group *new_heap, size_t alloc_size)$/;"	f
initialize_new_heap_free_blocks	heap_related/add_heap_pos_free_blocks_bonus.c	/^static void	initialize_new_heap_free_blocks(t_heap_group *new_heap, \\$/;"	f	file:
loop_alloc_block	show_mem_hexdump/show_mem_hexdump_bonus.c	/^static void	loop_alloc_block(t_heap_group *heap, char *heap_str)$/;"	f	file:
malloc	malloc_bonus.c	/^void	*malloc(size_t size)$/;"	f
merge_blocks	block_related/extend_block_bonus.c	/^static void	merge_blocks(t_block *block, size_t required_size)$/;"	f	file:
merge_heaps	heap_related/merge_heaps_bonus.c	/^t_heap_group	*merge_heaps(t_heap_group *heap_pos, t_heap_group *new_heap, \\$/;"	f
munmap_heap	free_bonus.c	/^static void	munmap_heap(t_heap_group *heap, t_block *block)$/;"	f	file:
print_white_spaces	show_mem_hexdump/display_hexa_format_bonus.c	/^static void	print_white_spaces(size_t alloc_block_size, \\$/;"	f	file:
print_zeros	show_mem_hexdump/display_hexa_format_bonus.c	/^static void	print_zeros(char *buffer, size_t *increment, \\$/;"	f	file:
put_realloc_block_after_alloc_block	block_related/shrink_free_block_bonus.c	/^static void	put_realloc_block_after_alloc_block(t_block *realloc_block, \\$/;"	f	file:
put_realloc_block_before_alloc_block	block_related/shrink_free_block_bonus.c	/^static void	put_realloc_block_before_alloc_block(t_block *realloc_block, \\$/;"	f	file:
realloc	realloc_bonus.c	/^void	*realloc(void *ptr, size_t size)$/;"	f
realloc_ptr	realloc_bonus.c	/^static void	*realloc_ptr(t_heap_group *heap, t_block *ptr_block, \\$/;"	f	file:
remove_ptr_block	block_related/shrink_free_block_bonus.c	/^static void	remove_ptr_block(t_heap_group *heap, t_block *ptr_block)$/;"	f	file:
rezone_allocation	realloc_bonus.c	/^static void	*rezone_allocation(t_block *ptr_block, void *ptr, size_t size)$/;"	f	file:
select_heap	heap_related/select_heap_bonus.c	/^t_heap_group	*select_heap(size_t size)$/;"	f
show_alloc_mem_ex	show_mem_hexdump/show_mem_hexdump_bonus.c	/^void	show_alloc_mem_ex(char *heap_str)$/;"	f
shrink_alloc_block	block_related/shrink_alloc_block_bonus.c	/^t_block	*shrink_alloc_block(t_heap_group *heap, t_block *ptr_block, \\$/;"	f
shrink_free_block	block_related/shrink_free_block_bonus.c	/^t_block	*shrink_free_block(t_heap_group *heap, t_block *ptr_block, \\$/;"	f
update_alloc_blocks	block_related/add_alloc_block_bonus.c	/^static t_block	*update_alloc_blocks(t_block *alloc_block, t_block *free_block)$/;"	f	file:
update_deleted_part	block_related/delete_block_bonus.c	/^static void	update_deleted_part(t_block *block, size_t size)$/;"	f	file:
update_heap_pos_free_blocks	heap_related/add_new_heap_free_blocks_bonus.c	/^static void	update_heap_pos_free_blocks(t_heap_group *new_heap, \\$/;"	f	file:
update_heaps	free_bonus.c	/^static void	update_heaps(t_heap_group *prev_heap, t_heap_group *next_heap)$/;"	f	file:
update_left_part	block_related/delete_block_bonus.c	/^static t_block	*update_left_part(t_block *block, size_t size)$/;"	f	file:
